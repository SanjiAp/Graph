import java.io.*;
import java.util.*;

public class Solution {
    static class edge{
            int src;
            int dest;
            int wt;
            edge(int src , int d,int w){
                dest = d;
                wt = w;
            }
            int getWt(){
                return wt;
            }
        }
    static class Graph{
        
        ArrayList<ArrayList<edge>> list ;
        int v;
        Graph(int nodes){
            list = new ArrayList<ArrayList<edge>>();
            v = nodes;
            for(int i = 0; i < v; i ++){
                list.add(new ArrayList<edge>());
            }
        }
        void addEdge(int src, int dest, int wt){
            ArrayList<edge> a = list.get(src);
            a.add(new edge(src ,dest,wt));
            a = list.get(dest);
            a.add(new edge(dest,src,wt));
        }
       ArrayList<edge> getList(int no){
            return list.get(no);
        }
        
    }
    
    public static void main(String[] args) throws IOException {
        PriorityQueue<edge> pq = new PriorityQueue<edge>((a,b)-> a.getWt()-b.getWt());
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        int n = Integer.parseInt(st.nextToken());
        int eno = Integer.parseInt(st.nextToken());
        
        Graph g = new Graph(n);
        for(int i = 0 ; i < eno; i++){
             st = new StringTokenizer(br.readLine()," ");
             g.addEdge(Integer.parseInt(st.nextToken()) - 1,Integer.parseInt(st.nextToken() ) - 1,Integer.parseInt(st.nextToken()));
                
            
        }
        int src = 0;
        boolean visited[] = new boolean[n];
        ArrayList<edge> s = g.getList(src);
        ArrayList<edge > ans = new ArrayList<edge>();
        for(edge e : s)
            pq.add(e);
        visited[src] = true;
        int count = 0 ,total = 0;
        while(!pq.isEmpty() && count < eno - 1){
            edge e1 = pq.poll();
            if(visited[e1.src] && !visited[e1.dest]){
                visited[e1.dest] = true;
                s = g.getList(e1.dest);
                for(edge ed : s){
                    pq.add(ed);
                }
                ans.add(e1);
                total += e1.getWt();
                count ++;
            }
        }
        System.out.println(total);
    }
}
